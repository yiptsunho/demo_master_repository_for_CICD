name: Main CI/CD
on:
  repository_dispatch:
    types: [module-updated]
  push:
    branches:
      - main
      - uat
    paths-ignore:
      - 'README.md'
      - 'TEST_STATUS.md'
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Main Repository
        uses: actions/checkout@v4
      - name: Deploy to CI/CD Server
        run: |
          # Set up SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 172.105.105.144 >> ~/.ssh/known_hosts
          
          # Deploy to server
          rsync -avz --exclude '.git' . root@172.105.105.144:/root/repo/demo_master_repository_for_CICD
          ssh root@172.105.105.144 'cd /root/repo/demo_master_repository_for_CICD && git pull origin main'
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
      - name: Checkout Test Repository
        uses: actions/checkout@v4
        with:
          repository: yiptsunho/fiyge_test_api
          token: ${{ secrets.TEST_REPO_TOKEN }}
          path: test-repo
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install Test Dependencies
        run: |
          cd test-repo
          npm install
          npm install --save-dev jest-junit jest-github-actions-reporter
      - name: Run API Tests
        id: api-tests
        run: |
          cd test-repo
          npm test index; true
          # npx jest --reporters=jest-junit --reporters=jest-github-actions-reporter --testLocationInResults
        env:
          API_URL: ${{ github.ref == 'refs/heads/main' && 'http://prod-server:8080' || 'http://ci-cd-server:8080' }}
      - name: Parse Test Results
        if: always()
        id: parse-results
        run: |
          cp test-repo/reports/junit.xml ../junit.xml
          sudo apt-get update && sudo apt-get install -y libxml2-utils
          MODULES=$(xmllint --xpath '//testcase/@classname' junit.xml | grep -oE '[a-z_]+/[a-z_]+' | cut -d'/' -f1 | sort -u)
          echo "# Test Results" > results.txt
          echo "" >> results.txt
          echo "## Latest Test Run (Run ${{ github.run_id }})" >> results.txt
          echo "" >> results.txt
          echo "| Module | Status | Commit | Timestamp | Run URL |" >> results.txt
          echo "|--------|--------|--------|-----------|---------|" >> results.txt
          for module in $MODULES; do
            FAILED=$(xmllint --xpath "count(//testcase[contains(@classname, '$module/')]/failure)" junit.xml 2>/dev/null || echo 0)
            STATUS=$([ "$FAILED" -eq 0 ] && echo "✅ Success" || echo "❌ Failure")
            COMMIT="${{ github.event.client_payload.commit || github.sha }}"
            TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            echo "| $module | $STATUS | $COMMIT | $TIMESTAMP | [$RUN_URL]($RUN_URL) |" >> results.txt
          done
          echo "results<<EOF" >> $GITHUB_OUTPUT
          cat results.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Update README.md
        if: always()
        run: |
          echo "# Main Repository Test Results" > README.md
          echo "" >> README.md
          cat results.txt >> README.md
      - name: Update TEST_STATUS.md
        if: always()
        run: |
          if [ ! -f TEST_STATUS.md ]; then
            echo "# Historical Test Results" > TEST_STATUS.md
            echo "" >> TEST_STATUS.md
            echo "| Module | Status | Commit | Timestamp | Run URL |" >> TEST_STATUS.md
            echo "|--------|--------|--------|-----------|---------|" >> TEST_STATUS.md
          fi
          tail -n +5 results.txt >> TEST_STATUS.md
      - name: Commit Updated Files
        if: always()
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config pull.rebase false
          git add README.md TEST_STATUS.md
          git commit -m "Update test results for run ${{ github.run_id }}"
          git pull
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: junit.xml
          retention-days: 7
      - name: Clean up uncommitted changes
        if: always()
        run: |
          git restore .
          git restore --staged .